#!/bin/bash

# Source YunoHost helpers
source _future.sh
source /usr/share/yunohost/helpers

# Exit on command errors and treat unset variables as an error
ynh_abort_if_errors

# Retrieve manifest arguments
app=$YNH_APP_INSTANCE_NAME
domain=$YNH_APP_ARG_DOMAIN
path=$YNH_APP_ARG_PATH
readonly app_system_name=$YNH_APP_ARG_SYSTEM_NAME
readonly app_display_name=$YNH_APP_ARG_DISPLAY_NAME
readonly db_name=$(ynh_sanitize_dbid --db_name=$app_system_name)
readonly is_public=$YNH_APP_ARG_IS_PUBLIC
readonly db_type=$YNH_APP_ARG_DB_TYPE

readonly final_path=/var/www/$app_system_name

# TODO
# Define a clean failsafe in case install script fails
function ynh_clean_setup ()
{
    ynh_print_warn --message="Clean failsafe 'ynh_clean_setup' not implemented"
}

function main()
{
    check_assertions
    configure_app
    install_dependencies
    init_venv
    init_db
    configure_flask_app
    configure_service
    configure_nginx
    start_app
}

function check_assertions()
{
    # Database is available
    if [[ ! $(ynh_package_is_installed --package="postgresql") && \
            $(ynh_psql_database_exists --database=$db_name) ]]
    then
        ynh_die --message="Database already exists :<"
    fi

    # Names are valid
    if [[ $app_system_name =~ [^a-z0-9] ]]
    then
        ynh_die --message="Invalid app_system_name (Should be lowercase alphanum)"
    fi
    if [[ $app_display_name =~ [^a-zA-Z0-9\ ] ]]
    then
        ynh_die --message="Invalid app_display_name (Should be alphanum, space allowed)"
    fi
}

function configure_app()
{
    ynh_webpath_register --app=$app --domain=$domain --path_url=$path
    ynh_app_setting_set --app="$app" --key="display_name" --value="$app_display_name"
    ynh_app_setting_set --app="$app" --key="system_name" --value="$app_system_name"
    ynh_app_setting_set --app="$app" --key="is_public" --value="$is_public"
    ynh_app_setting_set --app="$app" --key="db_type" --value="$db_type"
}

function install_dependencies()
{
    # Deal with DB dependencies with a switch
    case $db_type in
        "postgresql")
            db_dependencies="postgresql postgresql-server-dev-all"
            ;;
        "sqlite")
            db_dependencies="sqlite3"
            ;;
        *)
            ynh_die --message="Unknown database type"
            ;;
    esac

    # List to add as app dependencies
    dependencies = virtualenv \
                   python3-dev \
                   python3-virtualenv \
                   python3-pip \
                   $db_dependencies
    ynh_add_app_dependencies --package=dependencies
    # Calls ynh_install_app_dependencies directly
}

function init_venv()
{
    mkdir -p $final_path
    pushd $final_path
    virtualenv -p python3 venv
    set +o nounset
    source venv/bin/activate
    set -o nounset
    pip install Flask
    pip install Flask-Script
    pip install Flask-SQLAlchemy
    #psycopg2 driver for sqlalchemy postgresql dialect (either that or pg8000)
    if [ "$db_type" = 'postgresql' ]; then pip install psycopg2; fi
    pip install gunicorn
    popd
}

function init_db()
{
    # Generate random password
    readonly db_name=$(ynh_sanitize_dbid $app_system_name)
    readonly db_user=$app_system_name
    readonly db_pwd=$(ynh_string_random)

    if [ "$db_type" = 'postgresql' ]
    then
        # Initialize postgresql database
        ynh_psql_create_db $db_name $db_user $db_pwd
        readonly db_host=$db_user:$db_pwd@localhost #:$db_port

    elif [ "$db_type" = 'sqlite' ]
    then
        # Initialize sqlite database
        # TODO: password
        ynh_sqlite_create_db $db_name
        readonly db_host=""

    else
        ynh_die "Unknown database type"
    fi

    # Store database password for upgrade
    ynh_app_setting_set "$app" db_password "$db_pwd"
}

function configure_flask_app()
{
    # Copy hello-world sources
    cp -r ../sources/* $final_path/

    # App settings
    ynh_replace_string "__YNH_DB_NAME__"     "$db_name"    ../conf/settings.py
    ynh_replace_string "__YNH_DB_TYPE__"     "$db_type"    ../conf/settings.py
    ynh_replace_string "__YNH_DB_HOST__"     "$db_host"    ../conf/settings.py
    ynh_replace_string "__YNH_DB_USER__"     "$db_user"    ../conf/settings.py
    ynh_replace_string "__YNH_DB_PASSWORD__" "$db_pwd"     ../conf/settings.py
    ynh_replace_string "__YNH_APP_WEBPATH__" "$path"       ../conf/settings.py
    ynh_replace_string "__YNH_APP_FSPATH__"  "$final_path" ../conf/settings.py

    cp ../conf/settings.py $final_path/app/settings_local.py

    # Gunicorn
    ynh_replace_string "__YNH_APP_NAME__" "$app_system_name" ../conf/gunicorn.py
    ynh_replace_string "__YNH_APP_PATH__" "$final_path"      ../conf/gunicorn.py
    cp ../conf/gunicorn.py $final_path/

    # Init db
    pushd $final_path
    set +o nounset
    source venv/bin/activate
    set -o nounset
    ./manage.py nuke
    ./manage.py lorem
    popd

    # Set permissions
    useradd $app_system_name -d $final_path || echo "User already exists"
    chown -R $app_system_name:www-data $final_path
}

function configure_service()
{
    # Log folder
    mkdir -p /var/log/$app_system_name
    chown -R $app_system_name:www-data /var/log/$app_system_name

    # Systemd config
    ynh_replace_string "__YNH_APP_NAME__" "$app_system_name" ../conf/app.service
    ynh_replace_string "__YNH_APP_PATH__" "$final_path"      ../conf/app.service
    cp ../conf/app.service /etc/systemd/system/$app_system_name.service

    systemctl daemon-reload
    systemctl enable $app_system_name
    yunohost service add $app_system_name -l /var/log/$app_system_name/access.log
}

function configure_nginx()
{
    # Nginx conf
    ynh_replace_string "__YNH_APP_NAME__"    "$app_system_name" ../conf/nginx.conf
    ynh_replace_string "__YNH_APP_WEBPATH__" "$path"            ../conf/nginx.conf
    ynh_replace_string "__YNH_APP_FSPATH__"  "$final_path"      ../conf/nginx.conf
    cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$app_system_name.conf

    # Reload Nginx
    service nginx reload
}

function start_app()
{
    systemctl start $app_system_name
}

main
